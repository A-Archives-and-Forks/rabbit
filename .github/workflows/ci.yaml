name: Continuous Integration
on:
  workflow_dispatch:
  push:
    branches:
      - master
      - dev
    tags:
      - 'v*'

jobs:
  prepare-icon:
    name: Prepare Icon
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make Icon
        run: |
          sudo apt-get install -y imagemagick
          convert -background transparent -define 'icon:auto-resize=16,24,32,64' icon.svg Rabbit.ico

      - name: Upload Icon
        uses: actions/upload-artifact@v4
        with:
          name: Icon
          path: Rabbit.ico

  prepare-dependency:
    name: Prepare Dependency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Fetch Jiandao
        run: |
          WORK=`pwd`
          JIANDAO_TAG=$(curl -s https://api.github.com/repos/amorphobia/rime-jiandao/releases/latest | jq -r '.tag_name')
          JIANDAO_URL="https://github.com/amorphobia/rime-jiandao/releases/download/${JIANDAO_TAG}/jiandao-${JIANDAO_TAG}.zip"
          wget -O jiandao.zip ${JIANDAO_URL} && \
            rm -rf ${WORK}/schemas/jiandao && \
            mkdir ${WORK}/schemas/jiandao && \
            unzip jiandao.zip -d ${WORK}/schemas/jiandao/ && \
            rm jiandao.zip

      - name: Fetch Librime
        run: |
          WORK=`pwd`
          LIBRIME_TAG=$(curl -s https://api.github.com/repos/rime/librime/releases/latest | jq -r '.tag_name')
          LIBRIME_SHA=$(curl -s https://api.github.com/repos/rime/librime/tags | jq -r --arg LIBRIME_TAG "${LIBRIME_TAG}" '.[] | select(.name == $LIBRIME_TAG).commit.sha' | cut -c1-7)
          LIBRIME_MSVC_X86_URL="https://github.com/rime/librime/releases/download/${LIBRIME_TAG}/rime-${LIBRIME_SHA}-Windows-msvc-x86.7z"
          LIBRIME_MSVC_X86_DEPS_URL="https://github.com/rime/librime/releases/download/${LIBRIME_TAG}/rime-deps-${LIBRIME_SHA}-Windows-msvc-x86.7z"
          LIBRIME_MSVC_X64_URL="https://github.com/rime/librime/releases/download/${LIBRIME_TAG}/rime-${LIBRIME_SHA}-Windows-msvc-x64.7z"
          mkdir -p ${WORK}/librime-msvc ${WORK}/librime-clang
          cd ${WORK}/librime-msvc && \
            wget -O librime.7z ${LIBRIME_MSVC_X86_URL} && \
            7z x '-i!dist/lib/rime.dll' librime.7z && \
            cp dist/lib/rime.dll ${WORK}/rime-x86.dll && \
            rm -rf librime.7z dist && \
            wget -O deps.7z ${LIBRIME_MSVC_X86_DEPS_URL} && \
            7z x '-i!share/opencc' deps.7z && \
            cp -r share/opencc ${WORK}/ && \
            rm -rf deps.7z share
          cd ${WORK}/librime-clang && \
            wget -O librime.7z ${LIBRIME_MSVC_X64_URL} && \
            7z x '-i!dist/lib/rime.dll' librime.7z && \
            cp dist/lib/rime.dll ${WORK}/rime-x64.dll && \
            rm -rf librime.7z dist

      - name: Upload Rime
        uses: actions/upload-artifact@v4
        with:
          name: Rime
          path: |
            rime-x86.dll
            rime-x64.dll

      - name: Prepare SharedSupport
        run: |
          WORK=`pwd`
          SCHEMAS=${WORK}/schemas
          SHARED=${WORK}/SharedSupport
          rm -rf ${SHARED} && mkdir -p ${SHARED}
          cp ${SCHEMAS}/prelude/*.yaml ${SHARED}/
          cp ${SCHEMAS}/essay/essay.txt ${SHARED}/
          cp ${SCHEMAS}/default.yaml ${SHARED}/
          cp ${SCHEMAS}/pinyin-simp/*.yaml ${SHARED}/
          cp -r ${SCHEMAS}/jiandao/* ${SHARED}/
          cp ${WORK}/opencc/* ${SHARED}/opencc/

      - name: Upload SharedSupport
        uses: actions/upload-artifact@v4
        with:
          name: SharedSupport
          path: SharedSupport

  prepare-autohotkey-binaries:
    name: Prepare AutoHotkey Binaries
    runs-on: windows-latest
    needs: prepare-icon
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install RcEdit
        uses: MinoruSekine/setup-scoop@v4
        with:
          apps: rcedit

      - name: Download Dependencies
        uses: actions/download-artifact@v4
        with:
          name: Icon

      - name: Fetch AutoHotkey
        run: |
          $AhkVer = Invoke-RestMethod "https://www.autohotkey.com/download/2.0/version.txt"
          $AhkUrl = "https://www.autohotkey.com/download/2.0/AutoHotkey_$AhkVer.zip"
          Invoke-WebRequest $AhkUrl -Out ahk.zip
          Expand-Archive -Path ahk.zip -DestinationPath temp -Force
          Move-Item -Path .\temp\AutoHotkey*.exe -Destination .\
          Remove-Item -Recurse temp,ahk.zip
          rcedit .\AutoHotkey32.exe --set-icon .\Rabbit.ico
          rcedit .\AutoHotkey64.exe --set-icon .\Rabbit.ico

      - name: Upload AutoHotkey
        uses: actions/upload-artifact@v4
        with:
          name: AutoHotkey
          path: |
            AutoHotkey32.exe
            AutoHotkey64.exe

  build-rabbit:
    strategy:
      matrix:
        target: [ x86, x64 ]
        include:
          - { target: x86, ahk: AutoHotkey32.exe, rime: rime-x86.dll }
          - { target: x64, ahk: AutoHotkey64.exe, rime: rime-x64.dll }
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: [ prepare-dependency, prepare-autohotkey-binaries ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download Dependencies
        uses: actions/download-artifact@v4

      - name: Copy Artifacts
        run: |
          cp AutoHotkey/${{ matrix.ahk }} Rabbit.exe
          cp Rime/${{ matrix.rime }} rime.dll
          cp Icon/Rabbit.ico Rabbit.ico

      - name: Upload Rabbit ${{ matrix.target }}
        uses: actions/upload-artifact@v4
        with:
          name: Rabbit-${{ matrix.target }}
          path: |
            Lib/librime-ahk/*.ahk
            Lib/librime-ahk/LICENSE
            Lib/GetCaretPosEx/*.ahk
            Lib/GetCaretPosEx/LICENSE.txt
            Lib/*.ahk
            rime.dll
            Rabbit.exe
            Rabbit.ico
            *.ahk
            LICENSE
            README.md

      - name: Upload Full Zip of Rabbit ${{ matrix.target }}
        uses: actions/upload-artifact@v4
        with:
          name: Rabbit-Full-${{ matrix.target }}
          path: |
            SharedSupport
            Lib/librime-ahk/*.ahk
            Lib/librime-ahk/LICENSE
            Lib/GetCaretPosEx/*.ahk
            Lib/GetCaretPosEx/LICENSE.txt
            Lib/*.ahk
            rime.dll
            Rabbit.exe
            Rabbit.ico
            *.ahk
            LICENSE
            README.md

  create-release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build-rabbit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2

  upload-release:
    strategy:
      matrix:
        target: [ x86, x64 ]
    name: Upload Release for ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Rabbit-Full-${{ matrix.target }}
          path: release

      - name: Pack Zip
        working-directory: release
        run: |
          mkdir Rime && zip -r -q ../rabbit-${{ github.ref_name }}-${{ matrix.target }}.zip *

      - name: Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            rabbit-${{ github.ref_name }}-${{ matrix.target }}.zip
